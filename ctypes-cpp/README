Roman Yakovenko pointed me by email to an interesting post:

http://blogs.msdn.com/vcblog/archive/2008/12/08/inheriting-from-a-native-c-class-in-c.aspx

It describes an experiment in which a C++ class is called from C#
code.  A very similar mechanism could be used in Python via ctypes, if
only the __thiscall calling convention were implemented (it isn't
currently).

The files in this directory allow to experiment with this mechanism:

ctypes-thiscall.patch:
  A very preliminary patch against Python trunk, which adds the
  thiscall calling convention to ctypes.  Functions (actually methods)
  must be created using the CPPDLL library loader.

  The patch must be applied to Python trunk, and Python must be
  recompiled.

mydll.cpp, mydll.h:
  Source code for a simple C++ class.  I compiled with Visual Studio
  .NET 2003, from the command line with this command:
      cl /LD mydll.cpp
  The result will be a mydll.dll library which exports the C++ class.

get_exports.py:
   A script that allows to list exported symbols from a dll.  Copied
   from the ctypeslib\contrib directory.

undecorate.py:
   A Python module that allows to undecorate exported function names.

cpp.py:
   A simple Python script that defines a CSimpleClass, which is a
   Python proxy for the C++ class implemented in mydll.dll, basically
   code equivalent to the C# code in the blog post, but in Python.
